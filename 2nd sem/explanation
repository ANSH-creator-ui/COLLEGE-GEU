#include <stdio.h>
#include <stdlib.h>
#include <math.h>
âœ… We include libraries:

stdio.h â†’ for input/output (printf, scanf)

stdlib.h â†’ for general utilities (like dynamic memory, but not much used here)

math.h â†’ for math functions (sin, cos, log)

c
Copy
Edit
void basic_operations(FILE *file);
void trigonometric_operations(FILE *file);
void logarithmic_operation(FILE *file);
void matrix_operations(FILE *file);
âœ… Function prototypes:
We tell the compiler that these functions exist (definitions come later).

c
Copy
Edit
int main() {
âœ… Main program starts here.

c
Copy
Edit
    int choice;
    FILE *file = fopen("calculator_results.txt", "a");
âœ… choice is for menu options.
âœ… We open a file called calculator_results.txt in append mode ("a") to save results.

c
Copy
Edit
    if (!file) {
        printf("Error opening file!\n");
        return 1;
    }
âœ… If file opening fails, show an error and exit the program.

c
Copy
Edit
    do {
âœ… A do-while loop: It will keep running the menu until the user selects "Exit."

c
Copy
Edit
        printf("\n=== Calculator Menu ===\n");
        printf("1. Basic (+, -, *, /)\n2. Trigonometry (sin, cos, tan)\n3. Logarithm (base 10)\n4. Matrix (Add, Multiply)\n5. Exit\n");
        printf("Choose: ");
        scanf("%d", &choice);
âœ… Show menu to the user and take input.

c
Copy
Edit
        switch (choice) {
            case 1: basic_operations(file); break;
            case 2: trigonometric_operations(file); break;
            case 3: logarithmic_operation(file); break;
            case 4: matrix_operations(file); break;
            case 5: printf("Exiting...\n"); break;
            default: printf("Invalid option!\n");
        }
    } while (choice != 5);
âœ… Based on user choice, call the correct function. âœ… If choice is 5, exit the loop.

c
Copy
Edit
    fclose(file);
    return 0;
}
âœ… Close the file when program ends.
âœ… Return 0 to show program ended successfully.

ðŸ”µ BASIC OPERATIONS FUNCTION
c
Copy
Edit
void basic_operations(FILE *file) {
    double a, b, result;
    char op;
âœ… Declare two numbers (a, b), one result, and one operator (+, -, etc).

c
Copy
Edit
    printf("Enter (ex: 5 + 3): ");
    scanf("%lf %c %lf", &a, &op, &b);
âœ… Ask user for two numbers and operator.

c
Copy
Edit
    if (op == '+') result = a + b;
    else if (op == '-') result = a - b;
    else if (op == '*') result = a * b;
    else if (op == '/') {
âœ… Check which operator was entered, perform that calculation.

c
Copy
Edit
        if (b == 0) { printf("Error: divide by zero!\n"); return; }
        result = a / b;
âœ… Special check: can't divide by zero â€” show error if attempted.

c
Copy
Edit
    } else { printf("Invalid operator!\n"); return; }
âœ… If operator is not one of + - * /, show error.

c
Copy
Edit
    printf("Result: %.2lf\n", result);
    fprintf(file, "Basic: %.2lf %c %.2lf = %.2lf\n", a, op, b, result);
}
âœ… Print and also save result to file.

ðŸ”µ TRIGONOMETRIC FUNCTION
c
Copy
Edit
void trigonometric_operations(FILE *file) {
    int choice;
    double angle, result;
âœ… choice is 1,2,3 for sin, cos, tan.
âœ… angle is input, result is output.

c
Copy
Edit
    printf("1. sin 2. cos 3. tan\nChoose: ");
    scanf("%d", &choice);
    printf("Enter angle (degrees): ");
    scanf("%lf", &angle);
âœ… Take which function (sin, cos, tan) and input angle.

c
Copy
Edit
    double rad = angle * M_PI / 180.0;
âœ… Convert degrees to radians, because C math functions use radians.

c
Copy
Edit
    if (choice == 1) result = sin(rad);
    else if (choice == 2) result = cos(rad);
    else if (choice == 3) result = tan(rad);
    else { printf("Invalid!\n"); return; }
âœ… Calculate using correct function.

c
Copy
Edit
    printf("Result: %.4lf\n", result);
    fprintf(file, "Trig: %.2lf -> %.4lf\n", angle, result);
}
âœ… Show and save result.

ðŸ”µ LOGARITHMIC FUNCTION
c
Copy
Edit
void logarithmic_operation(FILE *file) {
    double num;
    printf("Enter number: ");
    scanf("%lf", &num);
âœ… Get number from user.

c
Copy
Edit
    if (num <= 0) {
        printf("Error: log undefined for <= 0!\n");
        return;
    }
âœ… Check that number is positive.

c
Copy
Edit
    double result = log10(num);
    printf("Result: %.4lf\n", result);
    fprintf(file, "Log10(%.2lf) = %.4lf\n", num, result);
}
âœ… Calculate base-10 log, show and save result.

ðŸ”µ MATRIX OPERATIONS
c
Copy
Edit
void matrix_operations(FILE *file) {
    int choice;
    printf("1. Add\n2. Multiply\nChoose: ");
    scanf("%d", &choice);
âœ… Choose matrix addition or multiplication.

c
Copy
Edit
    int r1, c1, r2, c2;
    printf("Enter rows and columns of Matrix A: ");
    scanf("%d%d", &r1, &c1);
    printf("Enter rows and columns of Matrix B: ");
    scanf("%d%d", &r2, &c2);
âœ… Take matrix sizes from user.

c
Copy
Edit
    if (choice == 1 && (r1 != r2 || c1 != c2)) {
        printf("Error: Sizes must match for addition!\n");
        return;
    }
    if (choice == 2 && (c1 != r2)) {
        printf("Error: Columns of A must equal rows of B for multiplication!\n");
        return;
    }
âœ… Check size compatibility for matrix operations.

c
Copy
Edit
    int A[r1][c1], B[r2][c2], Result[r1][c2];
âœ… Declare 2 matrices (A, B) and a Result matrix.

c
Copy
Edit
    printf("Enter elements of Matrix A:\n");
    for (int i = 0; i < r1; i++) for (int j = 0; j < c1; j++) scanf("%d", &A[i][j]);
    printf("Enter elements of Matrix B:\n");
    for (int i = 0; i < r2; i++) for (int j = 0; j < c2; j++) scanf("%d", &B[i][j]);
âœ… Take matrix elements from user.

For Matrix Addition
c
Copy
Edit
    if (choice == 1) {
        printf("Addition Result:\n");
        fprintf(file, "Matrix Addition:\n");
âœ… Print header for addition.

c
Copy
Edit
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c1; j++) {
                Result[i][j] = A[i][j] + B[i][j];
                printf("%d ", Result[i][j]);
                fprintf(file, "%d ", Result[i][j]);
            }
            printf("\n"); fprintf(file, "\n");
        }
    }
âœ… Add corresponding elements and print/save them.

For Matrix Multiplication
c
Copy
Edit
    else if (choice == 2) {
        printf("Multiplication Result:\n");
        fprintf(file, "Matrix Multiplication:\n");
        for (int i = 0; i < r1; i++)
            for (int j = 0; j < c2; j++) {
                Result[i][j] = 0;
                for (int k = 0; k < c1; k++)
                    Result[i][j] += A[i][k] * B[k][j];
            }
âœ… Multiply matrices: row of A Ã— column of B.

c
Copy
Edit
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c2; j++) {
                printf("%d ", Result[i][j]);
                fprintf(file, "%d ", Result[i][j]);
            }
            printf("\n"); fprintf(file, "\n");
        }
    }
âœ… Print and save multiplication result.

c
Copy
Edit
    else {
        printf("Invalid choice!\n");
    }
}